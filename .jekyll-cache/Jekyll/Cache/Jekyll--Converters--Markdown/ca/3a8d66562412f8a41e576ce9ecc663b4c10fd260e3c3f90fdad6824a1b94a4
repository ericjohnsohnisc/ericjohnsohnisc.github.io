I"¡<p>Create a new <code class="language-plaintext highlighter-rouge">.Net Framework 4.7.X</code> (or higher) or a <code class="language-plaintext highlighter-rouge">.Net Standard 2.1</code> compatible project (e.g. <code class="language-plaintext highlighter-rouge">.Net Core 3.1</code>) and install the required <a href="https://www.nuget.org/packages/ILGPU/">ILGPU Nuget</a> package.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// Create new  project with .Net 4.7 <span class="o">(</span>or higher<span class="o">)</span> or .Net Standard 2.1 compatible <span class="o">(</span>e.g. .Net Core 3.1<span class="o">)</span>
dotnet new console
nuget <span class="nb">install </span>ILGPU
</code></pre></div></div>

<p>We recommend that you disable the <code class="language-plaintext highlighter-rouge">Prefer 32bit</code> option in the application build-settings panel.
This typically ensures that the application is executed in native-OS mode (e.g. 64bit on a 64bit OS).
You will not able to instantiate an <code class="language-plaintext highlighter-rouge">Accelerator</code> instance unless your application runs in native-OS mode since ILGPU requires direct interaction with the graphics-driver API.</p>

<p>The ILGPU compiler has been designed in way that it <strong>does not</strong> rely on native libraries.
Therefore, it is not necessary to worry about such dependencies (except, of course, for the actual GPU drivers) or environment variables.
Neither a Cuda SDK nor an OpenCL SDK have to be installed to use ILGPU.</p>

<p>While GPU programming can be done using only the ILGPU package, we recommend using the <a href="https://www.nuget.org/packages/ILGPU.Algorithms/">ILGPU.Algorithms library</a> that realizes useful functions like scan, reduce and sort.</p>

<p>If you want to know about recent changes or new features refer to the <a href="">upgrade Guide</a>, the <a href="https://github.com/m4rs-mt/ILGPU/milestones">milestone descriptions</a> or the <a href="https://github.com/m4rs-mt/ILGPU/releases/">change logs</a>.</p>

<h2 id="the-ilgpu-context">The ILGPU Context</h2>
<p>All ILGPU classes and functions rely on the global ILGPU <code class="language-plaintext highlighter-rouge">Context</code>.
Instances of classes that require a context reference have to be disposed before disposing of the main context.
Note that all operations on a context and its children must be considered as <em>not thread safe</em>.</p>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="err">...</span>
<span class="err">{</span>
    <span class="nc">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">using</span> <span class="nn">var</span> <span class="n">context</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Context</span><span class="p">();</span>
        
        <span class="c1">// ILGPU-specific functionality goes here</span>

        <span class="c1">// Dispose all other classes before disposing the ILGPU context</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="algorithms-library">Algorithms Library</h2>
<p>The <code class="language-plaintext highlighter-rouge">ILGPU.Algorithms</code> library comes in a <strong>separate nuget package</strong>.
In order to use any of the exposed group/warp/math extensions you have to enable the library.
This setups all internal ILGPU hooks and custom code-generators to emit code that realizes the extensions in the right places.
This is achieved by using the new extension and intrinsic API.</p>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">ILGPU.Algorithms</span><span class="p">;</span>
<span class="k">class</span> <span class="err">...</span>
<span class="err">{</span>
    <span class="nc">static</span> <span class="k">void</span> <span class="p">...(...)</span>
    <span class="p">{</span>
        <span class="k">using</span> <span class="nn">var</span> <span class="n">context</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Context</span><span class="p">();</span>

        <span class="c1">// Enable all algorithms and extension methods</span>
        <span class="n">context</span><span class="p">.</span><span class="nf">EnableAlgorithms</span><span class="p">();</span>

        <span class="p">...</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><em>Note that you have to call <code class="language-plaintext highlighter-rouge">EnableAlgorithms</code> before instantiating <code class="language-plaintext highlighter-rouge">Accelerator</code> objects.</em></p>
:ET