I" <h2 id="arrayviews-and-variableviews">ArrayViews and VariableViews</h2>

<p>The <code class="language-plaintext highlighter-rouge">ArrayView</code> and <code class="language-plaintext highlighter-rouge">VariableView</code> structures have been adapted to the C# ‘ref’ features.
This renders explicit <code class="language-plaintext highlighter-rouge">Load</code> and <code class="language-plaintext highlighter-rouge">Store</code> methods obsolete.
In addition, all methods that accept <code class="language-plaintext highlighter-rouge">VariableView&lt;X&gt;</code> parameter types have been adapted to the parameter types <code class="language-plaintext highlighter-rouge">ref X</code>.
This applies, for example, to all methods of the class <code class="language-plaintext highlighter-rouge">Atomic</code>.</p>
<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="err">...</span>
<span class="err">{</span>
    <span class="nc">static</span> <span class="k">void</span> <span class="p">...(...)</span>
    <span class="p">{</span>
        <span class="c1">// Old way (obsolete and no longer supported)</span>
        <span class="n">ArrayView</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="n">someView</span> <span class="p">=</span> <span class="p">...</span>
        <span class="kt">var</span> <span class="n">variableView</span> <span class="p">=</span> <span class="n">someView</span><span class="p">.</span><span class="nf">GetVariableView</span><span class="p">(</span><span class="n">X</span><span class="p">);</span>
        <span class="n">Atomic</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">variableView</span><span class="p">);</span>
        <span class="p">...</span>
        <span class="n">variableView</span><span class="p">.</span><span class="nf">Store</span><span class="p">(</span><span class="m">42</span><span class="p">);</span>

        <span class="c1">// New way</span>
        <span class="n">ArrayView</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="n">someView</span> <span class="p">=</span> <span class="p">...</span>
        <span class="n">Atomic</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">ref</span> <span class="n">someView</span><span class="p">[</span><span class="n">X</span><span class="p">]);</span>
        <span class="p">...</span>
        <span class="n">someView</span><span class="p">[</span><span class="n">X</span><span class="p">]</span> <span class="p">=</span> <span class="m">42</span><span class="p">;</span>

        <span class="c1">// or</span>
        <span class="k">ref</span> <span class="kt">var</span> <span class="n">variable</span> <span class="p">=</span> <span class="k">ref</span> <span class="n">someView</span><span class="p">[</span><span class="n">X</span><span class="p">];</span>
        <span class="n">variable</span> <span class="p">=</span> <span class="m">42</span><span class="p">;</span>

        <span class="c1">// or</span>
        <span class="kt">var</span> <span class="n">variableView</span> <span class="p">=</span> <span class="n">someView</span><span class="p">.</span><span class="nf">GetVariableView</span><span class="p">(</span><span class="n">X</span><span class="p">);</span>
        <span class="n">variableView</span><span class="p">.</span><span class="n">Value</span> <span class="p">=</span> <span class="m">42</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="shared-memory">Shared Memory</h2>

<p>The general concept of shared memory has been redesigned.
The previous model required <code class="language-plaintext highlighter-rouge">SharedMemoryAttribute</code> attributes on specific parameters that should be allocated in shared memory.
The new model uses the static class <code class="language-plaintext highlighter-rouge">SharedMemory</code> to allocate this kind of memory procedurally in the scope of kernels.
This simplifies programming, kernel-delegate creation and enables non-kernel methods to allocate their own pool of shared memory.</p>

<p>Note that array lengths must be constants in this ILGPU version.
Hence, a dynamic allocation of shared memory is currently not supported.</p>

<p>The kernel loader methods <code class="language-plaintext highlighter-rouge">LoadSharedMemoryKernelX</code> and <code class="language-plaintext highlighter-rouge">LoadSharedMemoryStreamKernelX</code> have been removed.
They are no longer required, since a kernel does not have to declare its shared memory allocations in the form of additional parameters.</p>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="err">...</span>
<span class="err">{</span>
    <span class="nc">static</span> <span class="k">void</span> <span class="nf">SharedMemoryKernel</span><span class="p">(</span><span class="n">GroupedIndex</span> <span class="n">index</span><span class="p">,</span> <span class="p">...)</span>
    <span class="p">{</span>
        <span class="c1">// Allocate an array of 32 integers</span>
        <span class="n">ArrayView</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="n">sharedMemoryArray</span> <span class="p">=</span> <span class="n">SharedMemory</span><span class="p">.</span><span class="n">Allocate</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;(</span><span class="m">32</span><span class="p">);</span>

        <span class="c1">// Allocate a single variable of type long in shared memory</span>
        <span class="k">ref</span> <span class="kt">long</span> <span class="n">sharedMemoryVariable</span> <span class="p">=</span> <span class="k">ref</span> <span class="n">SharedMemory</span><span class="p">.</span><span class="n">Allocate</span><span class="p">&lt;</span><span class="kt">long</span><span class="p">&gt;();</span>

        <span class="p">...</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="cpu-debugging">CPU Debugging</h2>

<p>Starting a kernel in debug mode is a common task that developers go through many times a day.
Although ILGPU has been optimized for performance, you may not wait a few milliseconds every time you start your program to debug a kernel on the CPU.
For this reason, the context flag <code class="language-plaintext highlighter-rouge">ContextFlags.SkipCPUCodeGeneration</code> has been added.
It suppresses IR code generation for CPU kernels and uses the .Net runtime directly.
<em>Warning: This avoids general kernel analysis/verification checks. It should only be used by experienced users.</em></p>

<h2 id="internals">Internals</h2>

<p>The old LLVM-based concept of <code class="language-plaintext highlighter-rouge">CompileUnit</code> objects is obsolete and has been replaced by a completely new IR.
The new IR leverages <code class="language-plaintext highlighter-rouge">IRContext</code> objects to manage IR objects that are derived from the class <code class="language-plaintext highlighter-rouge">ILGPU.IR.Node</code>.
Unlike previous versions, an <code class="language-plaintext highlighter-rouge">IRContext</code> is not tied to a specific <code class="language-plaintext highlighter-rouge">Backend</code> instance and can be reused accross different hardware architectures.</p>

<p>The global optimization process can be controlled with the enumeration <code class="language-plaintext highlighter-rouge">OptimizationLevel</code>.
This level can be specified by passing the desired level to the <code class="language-plaintext highlighter-rouge">ILGPU.Context</code> constructor.
If the optimization level is not explicitly specified, the level is determined by the current build mode (either <code class="language-plaintext highlighter-rouge">Debug</code> or <code class="language-plaintext highlighter-rouge">Release</code>).</p>
:ET